name: OpenBSD

on:
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        openbsd-version: ['7.7', '7.6', '7.5', '7.4', '7.3', '7.2']

    steps:
      - run: |
          cat > test.c <<EOF
          #include <errno.h>
          #include <stdio.h>
          #include <stdlib.h>
          #include <string.h>

          #include <unistd.h>
          #include <limits.h>
          #include <sys/stat.h>
          #include <sys/types.h>
          #include <sys/sysctl.h>

          int selfpath(char buf[]) {
            const int mib[4] = { CTL_KERN, KERN_PROC_ARGS, getpid(), KERN_PROC_ARGV };

            size_t size;

            if (sysctl(mib, 4, NULL, &size, NULL, 0) != 0) {
                return -1;
            }

            char** argv = (char**)malloc(size);

            if (argv == NULL) {
                errno = ENOMEM;
                return -1;
            }

            memset(argv, 0, size);

            if (sysctl(mib, 4, argv, &size, NULL, 0) != 0) {
                return -1;
            }

            //////////////////////////////////

            size_t m = 0U;

            int ispath = 0;

            for ( ; argv[0][m] != '\0'; m++) {
                if (argv[0][m] == '/') {
                    ispath = 1;
                }
            }

            char argv0[m];

            for (size_t i = 0U; i <= m; i++) {
                argv0[i] = argv[0][i];
            }

            free(argv);

            fprintf(stderr, "ispath=%d\nargv0=%s\n", ispath, argv0);

            //////////////////////////////////

            if (ispath == 1) {
                if (argv0[0] == '/') {
                  for (size_t i = 0U; i <= m; i++) {
                      buf[i] = argv0[i];
                  }

                  return (m -1);
                } else {
                  const int mib[4] = { CTL_KERN, KERN_PROC_ARGS, getpid(), KERN_PROC_CWD };

                  size_t len;

                  if (sysctl(mib, 4, NULL, &len, NULL, 0) != 0) {
                      return -1;
                  }

                  if (sysctl(mib, 4, buf,  &len, NULL, 0) != 0) {
                      return -1;
                  }

                  char * p = buf + len;

                  p[0] = '/';
                  p++;

                  for (size_t i = 0U; i <= m; i++) {
                      p[i] = argv0[i];
                  }

                  return (len + m - 1);
                }
            }

            //////////////////////////////////

            const char * p = getenv("PATH");

            if (p == NULL) {
                return -2;
            }

            if (p[0] == '\0') {
                return -3;
            }

            //////////////////////////////////

            struct stat st;

            char pathBuf[PATH_MAX];

            char * q;

            size_t i;
            size_t n;

          loop:
            if (p[0] == '\0') {
                return 0;
            }

            if (p[0] == ' ' || p[0] == ':') {
                p++;
                goto loop;
            }

            //////////////////////////////////

            for (i = 0U; ; i++) {
                pathBuf[i] = p[i];

                if (p[i] == '\0') {
                    break;
                }

                if (p[i] == ':') {
                    pathBuf[i] = '\0';
                    break;
                }
            }

            //////////////////////////////////

            if ((stat(pathBuf, &st) == 0) && S_ISDIR(st.st_mode)) {
                q = &pathBuf[i];

                q[0] = '/';

                q++;

                for (size_t j = 0U; ; j++) {
                    q[j] = argv0[j];

                    if (q[j] == '\0') {
                        n = i + j + 1U;
                        break;
                    }
                }

                if (access(pathBuf, X_OK) == 0) {
                    for (size_t j = 0U; j < n; j++) {
                        buf[j] = pathBuf[j];
                    }

                    buf[n] = '\0';

                    return n;
                }
            }

            //////////////////////////////////

            p += i;

            if (p[0] == ':') {
                p++;
                goto loop;
            }

            return 0;
          }

          int main() {
            if (chdir("/usr/local") == -1) {
              perror("/usr/local");
              return -1;
            }

            char buf[PATH_MAX];

            int ret = selfpath(buf);

            if (ret > 0) {
              printf("%d:%s\n", ret, buf);
              return 0;
            }
            return ret;
          }
          EOF

      - uses: cross-platform-actions/action@master
        with:
          operating_system: openbsd
          version: ${{ matrix.openbsd-version }}
          shell: sh
          run: |
            run() {
              printf "\033[0;35m==>\033[0m \033[0;32m%b\n\033[0m" "$*"
              eval "$@"
            }

            set -ex

            id

            uname -r

            sudo pkg_add libarchive gcc%11 python%3.11

            ls /usr/local/
            ls /usr/local/bin/
            ls /usr/local/libexec/

            cc test.c

            $PWD/a.out

            ./a.out

            export PATH="$PWD:$PATH"

            a.out

            exit

            curl -LO https://github.com/fpliu1214/perl-distribution/releases/download/5.40.2/perl-5.40.2-openbsd-${{ matrix.openbsd-version }}-amd64.tar.xz
            install -d perl/
            bsdtar xf perl-5.40.2-openbsd-${{ matrix.openbsd-version }}-amd64.tar.xz -C perl/ --strip-components=1

            export PATH="$PWD/perl/bin:$PATH"

            perl -e 'print $^X'
            #perl -V:prefix
            #perl -V

            $PWD/perl/bin/perl -e 'print $^X'
            $PWD/perl/bin/perl -V:prefix
            $PWD/perl/bin/perl -V
